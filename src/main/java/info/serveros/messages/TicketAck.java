package info.serveros.messages;

import info.serveros.algorithms.*;
import info.serveros.Encrypter.CryptoMessage;
import info.serveros.OneTimeCredentials;
import java.util.Date;
import javax.json.JsonObject;
import javax.json.stream.JsonGenerator;

/**
 *  An acknowledgement of received credentials.
 */
public class TicketAck extends Encryptable {

    /**
     *  The nonce generated by the server.
     */
    public final long serverNonce;

    /**
     *  The initial nonce generated by the requester.
     */
    public final long requesterNonce;

    /**
     *  The final Nonce generatd by the requester.
     */
    public final long finalNonce;

    /**
     *  Constructor.
     *
     *  @param serverNonce The nonce generated by the server.
     *  @param requesterNonce the initial nonce generated by the Requester.
     *  @param finalNonce the final nonce generated by the requester.
     */
    public TicketAck(long serverNonce, long requesterNonce, long finalNonce) {
        super();
        this.serverNonce = serverNonce;
        this.requesterNonce = requesterNonce;
        this.finalNonce = finalNonce;
    }//TicketAck(long, long, long)*/

    /**
     *  Constructor.  Unpacks a Json Object.
     *
     *  @param o the Json Object.
     */
    public TicketAck(JsonObject o) {
        super(o);
        this.serverNonce = o.getJsonNumber("serverNonce").longValue();
        this.requesterNonce = o.getJsonNumber("requesterNonce").longValue();
        this.finalNonce = o.getJsonNumber("finalNonce").longValue();
    }//TicketAck(JsonObject)*/

    /**
     *  Constructor.  Unpacks a JSON String.
     *
     *  @param s A string that represents a JSON Encoded TicketAck.
     */
    public TicketAck(String s) {
        this(Encryptable.unJSON(s));
    }//TicketAck(String)*/


    /**
     *  Add Json elements of the current object to the already started JSON object.
     *
     *  @param g The JSON Generator to output to.
     */
    protected void jsonHelper(JsonGenerator g) {
        super.jsonHelper(g);
        g.write("serverNonce", this.serverNonce);
        g.write("requesterNonce", this.requesterNonce);
        g.write("finalNonce", this.finalNonce);
    }//jsonHelper(g)*/
}//TicketAck*/
