package info.serveros.messages;

import info.serveros.algorithms.*;
import info.serveros.Encrypter.CryptoMessage;
import info.serveros.OneTimeCredentials;
import java.util.Date;
import javax.json.JsonObject;
import javax.json.JsonValue;
import javax.json.stream.JsonGenerator;

/**
 *  Some Credentials.
 */
public class Ticket extends Encryptable {

    /**
     *  The application requesting credentials.
     */
    public final JsonValue requester;

    /**
     *  The application the credentials are for.
     */
    public final JsonValue requested;

    /**
     *  The nonce generated by the Server.
     */
    public final long serverNonce;

    /**
     *  The nonce generated by the Requester.
     */
    public final long requesterNonce;

    /**
     *  The Credentials: ID.
     */
    public final String id;

    /**
     *  The Credentials: Secret.
     */
    public final String secret;

    /**
     *  One Time Credentials, for Key exchange.
     */
    public final OneTimeCredentials oneTimeCredentials;

    /**
     *  The Hash to be used for the credential.
     */
    public final HashSpec hash;

    /**
     *  When these credentials expire.
     */
    private final Date expires;

    /**
     *  Some Arbitrary AuthData.
     */
    public final JsonValue authData;

    /**
     *  Constructor.
     *
     *  @param requester The application requesting credentials.
     *  @param requested The application to which the credentials.
     *  @param serverNonce The nonce generated by the Server.
     *  @param requesterNonce The nonce generated by the Requester
     *  @param id The Credentials Id.
     *  @param secret The Credentials Secret.
     *  @param oneTimeCredentials Credentials for the ticket exchange
     *  @param hash The Hash to be used.
     *  @param expires The date at which the the credentials expire.
     *  @param authData arbitrary Authentication Data.
     */
    public Ticket(JsonValue requester, JsonValue requested, long serverNonce, long requesterNonce, String id
                , String secret, OneTimeCredentials oneTimeCredentials, HashSpec hash, Date expires
                , JsonValue authData
            ) {
        this.requester = requester;
        this.requested = requested;
        this.serverNonce = serverNonce;
        this.requesterNonce = requesterNonce;
        this.id = id;
        this.secret = secret;
        this.oneTimeCredentials = oneTimeCredentials;
        this.hash = hash;
        this.expires = (Date) expires.clone();
        this.authData = authData;
    }//Ticket(String, String, long, long, String, String, OneTimeCredentials, HashSpec, Date, JsonValue)*/

    /**
     *  Constructor - unpacks from a Json Object.
     *
     *  @param o The Json Object.
     */
    public Ticket(JsonObject o) {
        super(o);
        this.requester = o.get("requester");
        this.requested = o.get("requested");
        this.serverNonce = o.getJsonNumber("serverNonce").longValue();
        this.requesterNonce = o.getJsonNumber("requesterNonce").longValue();
        this.id = o.getString("id");
        this.secret = o.getString("secret");
        this.oneTimeCredentials = new OneTimeCredentials(o.getJsonObject("oneTimeCredentials"));
        this.hash = HashSpec.fromString(o.getString("hash"));
        this.expires = new Date(o.getJsonNumber("expires").longValue());
        this.authData = o.get("authData");
    }//Ticket(JsonObject)*/

    /**
     *  Constructor.  Unpacks a JSON String.
     *
     *  @param s A string that represents a JSON Encoded Ticket
     */
    public Ticket(String s) {
        this(Encryptable.unJSON(s));
    }//Ticket(String)*/


    /**
     *  Add Json elements of the current object to the already started JSON object.
     *
     *  @param g The JSON Generator to output to.
     */
    @Override
    protected void jsonHelper(JsonGenerator g) {
        super.jsonHelper(g);
        g.write("requester", this.requester);
        g.write("requested", this.requested);
        g.write("serverNonce", this.serverNonce);
        g.write("requesterNonce", this.requesterNonce);
        g.write("id", this.id);
        g.write("secret", this.secret);
        g.write("hash", this.hash.toString());
        g.write("expires", this.expires.getTime());
        g.write("authData", this.authData);
        this.oneTimeCredentials.toJSON(g, "oneTimeCredentials");
    }//jsonHelper(g)*/

    /**
     *  Get the timestamp.
     */
    public Date getExpiry() {
        return (Date) this.expires.clone();
    }//getExpiry()*/
}//Ticket*/
