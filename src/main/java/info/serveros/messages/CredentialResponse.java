package info.serveros.messages;

import info.serveros.algorithms.*;
import info.serveros.Encrypter.CryptoMessage;
import info.serveros.OneTimeCredentials;
import java.util.Date;
import javax.json.JsonObject;
import javax.json.JsonArray;
import javax.json.JsonValue;
import javax.json.stream.JsonGenerator;

/**
 *  A credential response.
 */
public class CredentialResponse extends Encryptable {

    /**
     *  The application that requested credentials.
     */
    public final JsonValue requester;

    /**
     *  The application that the credentials are for.
     */
    public final JsonValue requested;

    /**
     *  A "new" Nonce generated by the Server.
     */
    public final long serverNonce;

    /**
     *  The nonce sent by the requester..
     */
    public final long requesterNonce;

    /**
     *  The credential ID.
     */
    public final String id;

    /**
     *  The credential Secret.
     */
    public final String secret;

    /**
     *  Some One Time Credentials for Ticket Presentation.
     */
    public final OneTimeCredentials credentials;

    /**
     *  The hash to be used.
     */
    public final HashSpec hash;

    /**
     *  The expiration date for these credentials.
     */
    private final Date expires;

    /**
     *  The ticket - to be presented to the Service Provider.
     */
    public final CryptoMessage ticket;

    /**
     *  Constructor.
     *
     *  @param requester The application that requested credentials.
     *  @param requested The application that the credentials are for.
     *  @param serverNonce A nonce generated by the server.
     *  @param requesterNonce A nonce generated by the requester
     *  @param id The Credential ID
     *  @param secret The Credential Secret.
     *  @param credentials One time credentials for ticket presentation.
     *  @param hash The hash to be used.
     *  @param expires The expiration date of these credentials.
     *  @param ticket The ticket for the Service Provider.
     */
    public CredentialResponse(JsonValue requester, JsonValue requested, long serverNonce, long requesterNonce
                , String id, String secret, OneTimeCredentials credentials, HashSpec hash
                , Date expires, CryptoMessage ticket )
            {
        super();
        this.requester = requester;
        this.requested = requested;
        this.serverNonce = serverNonce;
        this.requesterNonce = requesterNonce;
        this.id = id;
        this.secret = secret;
        this.credentials = credentials;
        this.hash = hash;
        this.expires = (Date) expires.clone();
        this.ticket = ticket;
    }//CredentialResponse(String, String, long, long, String, String, OneTimeCredentials, HashSpec, Date, CryptoMessage)*/

    /**
     *  Constructor - generates a new Nonce.
     *
     *  @param requester The application that requested credentials.
     *  @param requested The application that the credentials are for.
     *  @param requesterNonce A nonce generated by the requester
     *  @param id The Credential ID
     *  @param secret The Credential Secret.
     *  @param credentials One time credentials for ticket presentation.
     *  @param hash The hash to be used.
     *  @param expires The expiration date of these credentials.
     *  @param ticket The ticket for the Service Provider.
     */
    public CredentialResponse(JsonValue requester, JsonValue requested, long requesterNonce
                , String id, String secret, OneTimeCredentials credentials, HashSpec hash
                , Date expires, CryptoMessage ticket )
             {
        this(requester, requested, Encryptable.generateNonce(), requesterNonce, id, secret, credentials, hash, expires, ticket);
    }//CredentialResponse(String, String, long, String, String, OneTimeCredentials, HashSpec, Date, CryptoMessage)*/

    /**
     *  Constructor.  Unpacks a JSON Object.
     *
     *  @param o THe JSON Object.
     */
    public CredentialResponse(JsonObject o) {
        super(o);
        this.requester = o.get("requester");
        this.requested = o.get("requested");
        this.serverNonce = o.getJsonNumber("serverNonce").longValue();
        this.requesterNonce = o.getJsonNumber("requesterNonce").longValue();
        this.hash = HashSpec.fromString(o.getString("hash"));
        this.id = o.getString("id");
        this.secret = o.getString("secret");
        this.expires = new Date(o.getJsonNumber("expires").longValue());
        this.credentials = new OneTimeCredentials(o.getJsonObject("oneTimeCredentials"));
        this.ticket = new CryptoMessage(o.getJsonObject("ticket"));
    }//CredentialResponse(JsonObject)*/

    /**
     *  Constructor.  Unpacks a JSON String.
     *
     *  @param s A string that represents a JSON Encoded Credential Response.
     */
    public CredentialResponse(String s) {
        this(Encryptable.unJSON(s));
    }//CredentialResponse(String)*/

    /**
     *  Get the timestamp.
     */
    public Date getExpiration() {
        return (Date) this.expires.clone();
    }//getTimestamp()*/

    /**
     *  Add Json elements of the current object to the already started JSON object.
     *
     *  @param g The JSON Generator to output to.
     */
    protected void jsonHelper(JsonGenerator g) {
        super.jsonHelper(g);
        g.write("requester", this.requester);
        g.write("requested", this.requested);
        g.write("serverNonce", this.serverNonce);
        g.write("requesterNonce", this.requesterNonce);
        g.write("id", this.id);
        g.write("secret", this.secret);
        g.write("hash", this.hash.toString());
        g.write("expires", this.expires.getTime());
        this.credentials.toJSON(g, "oneTimeCredentials");
        this.ticket.toJSON(g, "ticket");
    }//jsonHelper(g)*/
}//CredentialResponse*/
